{
  "service": {
    "service": "next-step-paws-api",
    "serviceObject": {
      "name": "next-step-paws-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "stage": "prod",
      "environment": {
        "USERS_TABLE": "next-step-paws-api-users-prod",
        "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
        "CLASSES_TABLE": "next-step-paws-api-classes-prod",
        "SLOTS_TABLE": "next-step-paws-api-slots-prod",
        "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
        "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListTagsOfResource"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "UsersTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "BookingsTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "ClassesTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "SlotsTable",
                "Arn"
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "UsersTable",
                      "Arn"
                    ]
                  },
                  "index/*"
                ]
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "BookingsTable",
                      "Arn"
                    ]
                  },
                  "index/*"
                ]
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "ClassesTable",
                      "Arn"
                    ]
                  },
                  "index/*"
                ]
              ]
            },
            {
              "Fn::Join": [
                "/",
                [
                  {
                    "Fn::GetAtt": [
                      "SlotsTable",
                      "Arn"
                    ]
                  },
                  "index/*"
                ]
              ]
            }
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HealthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-health"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-login"
            }
          },
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-register"
            }
          },
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-getUsers"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-getUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-updateUser"
            }
          },
          "GetBookingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-getBookings"
            }
          },
          "CreateBookingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-createBooking"
            }
          },
          "UpdateBookingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-updateBooking"
            }
          },
          "DeleteBookingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-deleteBooking"
            }
          },
          "GetClassesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-getClasses"
            }
          },
          "CreateClassLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-createClass"
            }
          },
          "UpdateClassLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-updateClass"
            }
          },
          "EnrollInClassLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-enrollInClass"
            }
          },
          "GetSlotsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-getSlots"
            }
          },
          "CreateSlotLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-createSlot"
            }
          },
          "DeleteSlotLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/next-step-paws-api-prod-deleteSlot"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "next-step-paws-api",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/next-step-paws-api-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/next-step-paws-api-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "next-step-paws-api",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HealthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/health.zip"
              },
              "Handler": "src/health.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-health",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HealthLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/login.zip"
              },
              "Handler": "src/auth.login",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/register.zip"
              },
              "Handler": "src/auth.register",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-register",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/getUsers.zip"
              },
              "Handler": "src/users.getUsers",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-getUsers",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/getUser.zip"
              },
              "Handler": "src/users.getUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/updateUser.zip"
              },
              "Handler": "src/users.updateUser",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "GetBookingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/getBookings.zip"
              },
              "Handler": "src/bookings.getBookings",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-getBookings",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetBookingsLogGroup"
            ]
          },
          "CreateBookingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/createBooking.zip"
              },
              "Handler": "src/bookings.createBooking",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-createBooking",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBookingLogGroup"
            ]
          },
          "UpdateBookingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/updateBooking.zip"
              },
              "Handler": "src/bookings.updateBooking",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-updateBooking",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBookingLogGroup"
            ]
          },
          "DeleteBookingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/deleteBooking.zip"
              },
              "Handler": "src/bookings.deleteBooking",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-deleteBooking",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteBookingLogGroup"
            ]
          },
          "GetClassesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/getClasses.zip"
              },
              "Handler": "src/classes.getClasses",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-getClasses",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClassesLogGroup"
            ]
          },
          "CreateClassLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/createClass.zip"
              },
              "Handler": "src/classes.createClass",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-createClass",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateClassLogGroup"
            ]
          },
          "UpdateClassLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/updateClass.zip"
              },
              "Handler": "src/classes.updateClass",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-updateClass",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateClassLogGroup"
            ]
          },
          "EnrollInClassLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/enrollInClass.zip"
              },
              "Handler": "src/classes.enrollInClass",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-enrollInClass",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EnrollInClassLogGroup"
            ]
          },
          "GetSlotsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/getSlots.zip"
              },
              "Handler": "src/slots.getSlots",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-getSlots",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSlotsLogGroup"
            ]
          },
          "CreateSlotLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/createSlot.zip"
              },
              "Handler": "src/slots.createSlot",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-createSlot",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSlotLogGroup"
            ]
          },
          "DeleteSlotLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z/deleteSlot.zip"
              },
              "Handler": "src/slots.deleteSlot",
              "Runtime": "nodejs18.x",
              "FunctionName": "next-step-paws-api-prod-deleteSlot",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "USERS_TABLE": "next-step-paws-api-users-prod",
                  "BOOKINGS_TABLE": "next-step-paws-api-bookings-prod",
                  "CLASSES_TABLE": "next-step-paws-api-classes-prod",
                  "SLOTS_TABLE": "next-step-paws-api-slots-prod",
                  "JWT_SECRET": "your-super-secret-jwt-key-change-in-production",
                  "FRONTEND_URL": "https://main.d1234567890.amplifyapp.com"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteSlotLogGroup"
            ]
          },
          "HealthLambdaVersion30bSher2IvsqZPSP9EUBBpLQXDFPGPZJpsp0Vy8YXE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthLambdaFunction"
              },
              "CodeSha256": "E55foQaoM8Ti4DtyL6wGmFsDbOdN1civT6tKgh0BHo0="
            }
          },
          "GetBookingsLambdaVersionDbXZjpYzfq60kZHek6Chaa4bLn2a7MW1wNmZXRnptM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBookingsLambdaFunction"
              },
              "CodeSha256": "PM0MqADek9Q5j9dBA/qEvrspvMvzhIzZ6LKRNFIHH/M="
            }
          },
          "CreateClassLambdaVersionnzis30EVZOJfvQVED1mhKaYDVzD2cHFWhNvoYiA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateClassLambdaFunction"
              },
              "CodeSha256": "+RCA0+xfiEmnbzSDk0ASTKQugmkZO5/Es6f6LH1kgUU="
            }
          },
          "EnrollInClassLambdaVersionEDWWh6nI2BKnAm86WnDI5jxS9JnaY6ma4iF5KoiA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EnrollInClassLambdaFunction"
              },
              "CodeSha256": "+RCA0+xfiEmnbzSDk0ASTKQugmkZO5/Es6f6LH1kgUU="
            }
          },
          "DeleteBookingLambdaVersiontBwK7E7YMsqm1fLEzoFEkemqSkvrZplNIVvMJ00KY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteBookingLambdaFunction"
              },
              "CodeSha256": "PM0MqADek9Q5j9dBA/qEvrspvMvzhIzZ6LKRNFIHH/M="
            }
          },
          "CreateSlotLambdaVersionZls2KMuYgWg90x5x9UM2Wy78kATFkeuxE9u0vnnerY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSlotLambdaFunction"
              },
              "CodeSha256": "xuMmO4dtDo9UwdxKj8B9sQAJiAMh6sHoExPsMpHxNCk="
            }
          },
          "GetSlotsLambdaVersionfbhLfefCcZ3opHqBE6LJFPxkiSJ5D1Z32hmeJNE6ZI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSlotsLambdaFunction"
              },
              "CodeSha256": "xuMmO4dtDo9UwdxKj8B9sQAJiAMh6sHoExPsMpHxNCk="
            }
          },
          "GetClassesLambdaVersiontMUIEs9zBUrdxkmcTrM9suC6PXaLuhvDq55r5XRVec": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClassesLambdaFunction"
              },
              "CodeSha256": "+RCA0+xfiEmnbzSDk0ASTKQugmkZO5/Es6f6LH1kgUU="
            }
          },
          "UpdateClassLambdaVersionNsIAYHU40qY2jyXBjFRXvEOTW2JmzX8VKohwKaNc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateClassLambdaFunction"
              },
              "CodeSha256": "+RCA0+xfiEmnbzSDk0ASTKQugmkZO5/Es6f6LH1kgUU="
            }
          },
          "UpdateBookingLambdaVersioncqUtbtqxclyikP89K8SWOz6rJFXwwtmFRwzr3WRYE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateBookingLambdaFunction"
              },
              "CodeSha256": "PM0MqADek9Q5j9dBA/qEvrspvMvzhIzZ6LKRNFIHH/M="
            }
          },
          "CreateBookingLambdaVersionBwYeLjOywljWMDfBAaOnnvzA6BdKIrvLm1DeiaO7E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBookingLambdaFunction"
              },
              "CodeSha256": "PM0MqADek9Q5j9dBA/qEvrspvMvzhIzZ6LKRNFIHH/M="
            }
          },
          "LoginLambdaVersionmCpDs2DiR528gNlwKY6wS7onkrYGvcK9odB52t4es8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "rdMfbudN8e6JBND1roFiEDTaOIVV4w9KWq49HpQLxv0="
            }
          },
          "RegisterLambdaVersionuKA5IbvrGQxOS2KYfxywgzpke4NpL4bgnxb0n87XuBg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "rdMfbudN8e6JBND1roFiEDTaOIVV4w9KWq49HpQLxv0="
            }
          },
          "UpdateUserLambdaVersioneFK80CHUuDCPHydFq3JiL3P492C19WTqRfVEsKsDEjI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "JjZu7Kr6XJViEazH9oB7UZvMnpZifjwSg12u0CM3VPw="
            }
          },
          "DeleteSlotLambdaVersion4FoNC19Rt3wkqcochQfEXBtXujfF59fpoTUxM0LMKo0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteSlotLambdaFunction"
              },
              "CodeSha256": "xuMmO4dtDo9UwdxKj8B9sQAJiAMh6sHoExPsMpHxNCk="
            }
          },
          "GetUserLambdaVersionl4ZACnJiKKS0aveWILqWuMGdbBxjwp32aKEJzSLM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "JjZu7Kr6XJViEazH9oB7UZvMnpZifjwSg12u0CM3VPw="
            }
          },
          "GetUsersLambdaVersionGI96ofUse4XjmflqXx4sA47hwENGlMsK0q10iNcas": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "JjZu7Kr6XJViEazH9oB7UZvMnpZifjwSg12u0CM3VPw="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-next-step-paws-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHealth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "health",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApi": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "api",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiAuth"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiAuthRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiAuth"
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiBookings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "bookings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiBookingsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiBookings"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiClasses": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "classes",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiClassesIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiClasses"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiClassesIdVarEnroll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiClassesIdVar"
              },
              "PathPart": "enroll",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiSlots": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApi"
              },
              "PathPart": "slots",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceApiSlotsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApiSlots"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiAuthLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiAuthRegisterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiUsersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiBookingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiBookingsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiBookingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiClassesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClasses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiClassesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClassesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiClassesIdVarEnrollOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClassesIdVarEnroll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiSlotsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSlots"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodApiSlotsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSlotsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HealthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiAuthLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiAuthRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiAuthRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiUsersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiBookingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBookingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetBookingsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiBookingsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiBookings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBookingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateBookingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiBookingsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiBookingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBookingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateBookingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiBookingsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiBookingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteBookingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteBookingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiClassesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClasses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClassesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetClassesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiClassesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClasses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateClassLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateClassLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiClassesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClassesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateClassLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateClassLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiClassesIdVarEnrollPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiClassesIdVarEnroll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EnrollInClassLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "EnrollInClassLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiSlotsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSlots"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSlotsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSlotsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiSlotsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSlots"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateSlotLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateSlotLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodApiSlotsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceApiSlotsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteSlotLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteSlotLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1754876548682": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodHealthOptions",
              "ApiGatewayMethodApiAuthLoginOptions",
              "ApiGatewayMethodApiAuthRegisterOptions",
              "ApiGatewayMethodApiUsersOptions",
              "ApiGatewayMethodApiUsersIdVarOptions",
              "ApiGatewayMethodApiBookingsOptions",
              "ApiGatewayMethodApiBookingsIdVarOptions",
              "ApiGatewayMethodApiClassesOptions",
              "ApiGatewayMethodApiClassesIdVarOptions",
              "ApiGatewayMethodApiClassesIdVarEnrollOptions",
              "ApiGatewayMethodApiSlotsOptions",
              "ApiGatewayMethodApiSlotsIdVarOptions",
              "ApiGatewayMethodHealthGet",
              "ApiGatewayMethodApiAuthLoginPost",
              "ApiGatewayMethodApiAuthRegisterPost",
              "ApiGatewayMethodApiUsersGet",
              "ApiGatewayMethodApiUsersIdVarGet",
              "ApiGatewayMethodApiUsersIdVarPut",
              "ApiGatewayMethodApiBookingsGet",
              "ApiGatewayMethodApiBookingsPost",
              "ApiGatewayMethodApiBookingsIdVarPut",
              "ApiGatewayMethodApiBookingsIdVarDelete",
              "ApiGatewayMethodApiClassesGet",
              "ApiGatewayMethodApiClassesPost",
              "ApiGatewayMethodApiClassesIdVarPut",
              "ApiGatewayMethodApiClassesIdVarEnrollPost",
              "ApiGatewayMethodApiSlotsGet",
              "ApiGatewayMethodApiSlotsPost",
              "ApiGatewayMethodApiSlotsIdVarDelete"
            ]
          },
          "HealthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HealthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBookingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBookingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBookingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBookingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateBookingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateBookingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteBookingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteBookingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetClassesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClassesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateClassLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateClassLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateClassLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateClassLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EnrollInClassLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EnrollInClassLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSlotsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSlotsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateSlotLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSlotLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteSlotLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteSlotLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "next-step-paws-api-users-prod",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "role",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "RoleIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "role",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": false
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "Service",
                  "Value": "next-step-paws-api"
                }
              ]
            }
          },
          "BookingsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "next-step-paws-api-bookings-prod",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "slotId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "UserIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "SlotIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "slotId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "StatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "Service",
                  "Value": "next-step-paws-api"
                }
              ]
            }
          },
          "ClassesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "next-step-paws-api-classes-prod",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "level",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "LevelIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "level",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "Service",
                  "Value": "next-step-paws-api"
                }
              ]
            }
          },
          "SlotsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "next-step-paws-api-slots-prod",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "isBooked",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "DateIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "date",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "BookingStatusIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "isBooked",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "prod"
                },
                {
                  "Key": "Service",
                  "Value": "next-step-paws-api"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-ServerlessDeploymentBucketName"
            }
          },
          "HealthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthLambdaVersion30bSher2IvsqZPSP9EUBBpLQXDFPGPZJpsp0Vy8YXE"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-HealthLambdaFunctionQualifiedArn"
            }
          },
          "GetBookingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBookingsLambdaVersionDbXZjpYzfq60kZHek6Chaa4bLn2a7MW1wNmZXRnptM"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-GetBookingsLambdaFunctionQualifiedArn"
            }
          },
          "CreateClassLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateClassLambdaVersionnzis30EVZOJfvQVED1mhKaYDVzD2cHFWhNvoYiA"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-CreateClassLambdaFunctionQualifiedArn"
            }
          },
          "EnrollInClassLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EnrollInClassLambdaVersionEDWWh6nI2BKnAm86WnDI5jxS9JnaY6ma4iF5KoiA"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-EnrollInClassLambdaFunctionQualifiedArn"
            }
          },
          "DeleteBookingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteBookingLambdaVersiontBwK7E7YMsqm1fLEzoFEkemqSkvrZplNIVvMJ00KY"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-DeleteBookingLambdaFunctionQualifiedArn"
            }
          },
          "CreateSlotLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSlotLambdaVersionZls2KMuYgWg90x5x9UM2Wy78kATFkeuxE9u0vnnerY"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-CreateSlotLambdaFunctionQualifiedArn"
            }
          },
          "GetSlotsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSlotsLambdaVersionfbhLfefCcZ3opHqBE6LJFPxkiSJ5D1Z32hmeJNE6ZI"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-GetSlotsLambdaFunctionQualifiedArn"
            }
          },
          "GetClassesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClassesLambdaVersiontMUIEs9zBUrdxkmcTrM9suC6PXaLuhvDq55r5XRVec"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-GetClassesLambdaFunctionQualifiedArn"
            }
          },
          "UpdateClassLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateClassLambdaVersionNsIAYHU40qY2jyXBjFRXvEOTW2JmzX8VKohwKaNc"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-UpdateClassLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBookingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateBookingLambdaVersioncqUtbtqxclyikP89K8SWOz6rJFXwwtmFRwzr3WRYE"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-UpdateBookingLambdaFunctionQualifiedArn"
            }
          },
          "CreateBookingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBookingLambdaVersionBwYeLjOywljWMDfBAaOnnvzA6BdKIrvLm1DeiaO7E"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-CreateBookingLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionmCpDs2DiR528gNlwKY6wS7onkrYGvcK9odB52t4es8"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-LoginLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersionuKA5IbvrGQxOS2KYfxywgzpke4NpL4bgnxb0n87XuBg"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersioneFK80CHUuDCPHydFq3JiL3P492C19WTqRfVEsKsDEjI"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteSlotLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteSlotLambdaVersion4FoNC19Rt3wkqcochQfEXBtXujfF59fpoTUxM0LMKo0"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-DeleteSlotLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionl4ZACnJiKKS0aveWILqWuMGdbBxjwp32aKEJzSLM"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionGI96ofUse4XjmflqXx4sA47hwENGlMsK0q10iNcas"
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-next-step-paws-api-prod-ServiceEndpoint"
            }
          },
          "UsersTableName": {
            "Value": {
              "Ref": "UsersTable"
            },
            "Export": {
              "Name": "next-step-paws-api-prod-UsersTableName"
            }
          },
          "BookingsTableName": {
            "Value": {
              "Ref": "BookingsTable"
            },
            "Export": {
              "Name": "next-step-paws-api-prod-BookingsTableName"
            }
          },
          "ClassesTableName": {
            "Value": {
              "Ref": "ClassesTable"
            },
            "Export": {
              "Name": "next-step-paws-api-prod-ClassesTableName"
            }
          },
          "SlotsTableName": {
            "Value": {
              "Ref": "SlotsTable"
            },
            "Export": {
              "Name": "next-step-paws-api-prod-SlotsTableName"
            }
          },
          "ApiGatewayUrl": {
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "prod"
                ]
              ]
            },
            "Export": {
              "Name": "next-step-paws-api-prod-ApiGatewayUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      }
    },
    "plugins": [
      "serverless-offline",
      "serverless-webpack"
    ],
    "pluginsData": {},
    "functions": {
      "health": {
        "handler": "src/health.handler",
        "events": [
          {
            "http": {
              "path": "health",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-health",
        "package": {
          "artifact": ".serverless/health.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "HealthLambdaVersion30bSher2IvsqZPSP9EUBBpLQXDFPGPZJpsp0Vy8YXE"
      },
      "login": {
        "handler": "src/auth.login",
        "events": [
          {
            "http": {
              "path": "api/auth/login",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-login",
        "package": {
          "artifact": ".serverless/login.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionmCpDs2DiR528gNlwKY6wS7onkrYGvcK9odB52t4es8"
      },
      "register": {
        "handler": "src/auth.register",
        "events": [
          {
            "http": {
              "path": "api/auth/register",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-register",
        "package": {
          "artifact": ".serverless/register.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RegisterLambdaVersionuKA5IbvrGQxOS2KYfxywgzpke4NpL4bgnxb0n87XuBg"
      },
      "getUsers": {
        "handler": "src/users.getUsers",
        "events": [
          {
            "http": {
              "path": "api/users",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-getUsers",
        "package": {
          "artifact": ".serverless/getUsers.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionGI96ofUse4XjmflqXx4sA47hwENGlMsK0q10iNcas"
      },
      "getUser": {
        "handler": "src/users.getUser",
        "events": [
          {
            "http": {
              "path": "api/users/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-getUser",
        "package": {
          "artifact": ".serverless/getUser.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionl4ZACnJiKKS0aveWILqWuMGdbBxjwp32aKEJzSLM"
      },
      "updateUser": {
        "handler": "src/users.updateUser",
        "events": [
          {
            "http": {
              "path": "api/users/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-updateUser",
        "package": {
          "artifact": ".serverless/updateUser.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersioneFK80CHUuDCPHydFq3JiL3P492C19WTqRfVEsKsDEjI"
      },
      "getBookings": {
        "handler": "src/bookings.getBookings",
        "events": [
          {
            "http": {
              "path": "api/bookings",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-getBookings",
        "package": {
          "artifact": ".serverless/getBookings.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetBookingsLambdaVersionDbXZjpYzfq60kZHek6Chaa4bLn2a7MW1wNmZXRnptM"
      },
      "createBooking": {
        "handler": "src/bookings.createBooking",
        "events": [
          {
            "http": {
              "path": "api/bookings",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-createBooking",
        "package": {
          "artifact": ".serverless/createBooking.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateBookingLambdaVersionBwYeLjOywljWMDfBAaOnnvzA6BdKIrvLm1DeiaO7E"
      },
      "updateBooking": {
        "handler": "src/bookings.updateBooking",
        "events": [
          {
            "http": {
              "path": "api/bookings/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-updateBooking",
        "package": {
          "artifact": ".serverless/updateBooking.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateBookingLambdaVersioncqUtbtqxclyikP89K8SWOz6rJFXwwtmFRwzr3WRYE"
      },
      "deleteBooking": {
        "handler": "src/bookings.deleteBooking",
        "events": [
          {
            "http": {
              "path": "api/bookings/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-deleteBooking",
        "package": {
          "artifact": ".serverless/deleteBooking.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteBookingLambdaVersiontBwK7E7YMsqm1fLEzoFEkemqSkvrZplNIVvMJ00KY"
      },
      "getClasses": {
        "handler": "src/classes.getClasses",
        "events": [
          {
            "http": {
              "path": "api/classes",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-getClasses",
        "package": {
          "artifact": ".serverless/getClasses.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetClassesLambdaVersiontMUIEs9zBUrdxkmcTrM9suC6PXaLuhvDq55r5XRVec"
      },
      "createClass": {
        "handler": "src/classes.createClass",
        "events": [
          {
            "http": {
              "path": "api/classes",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-createClass",
        "package": {
          "artifact": ".serverless/createClass.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateClassLambdaVersionnzis30EVZOJfvQVED1mhKaYDVzD2cHFWhNvoYiA"
      },
      "updateClass": {
        "handler": "src/classes.updateClass",
        "events": [
          {
            "http": {
              "path": "api/classes/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-updateClass",
        "package": {
          "artifact": ".serverless/updateClass.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "UpdateClassLambdaVersionNsIAYHU40qY2jyXBjFRXvEOTW2JmzX8VKohwKaNc"
      },
      "enrollInClass": {
        "handler": "src/classes.enrollInClass",
        "events": [
          {
            "http": {
              "path": "api/classes/{id}/enroll",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-enrollInClass",
        "package": {
          "artifact": ".serverless/enrollInClass.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "EnrollInClassLambdaVersionEDWWh6nI2BKnAm86WnDI5jxS9JnaY6ma4iF5KoiA"
      },
      "getSlots": {
        "handler": "src/slots.getSlots",
        "events": [
          {
            "http": {
              "path": "api/slots",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-getSlots",
        "package": {
          "artifact": ".serverless/getSlots.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSlotsLambdaVersionfbhLfefCcZ3opHqBE6LJFPxkiSJ5D1Z32hmeJNE6ZI"
      },
      "createSlot": {
        "handler": "src/slots.createSlot",
        "events": [
          {
            "http": {
              "path": "api/slots",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-createSlot",
        "package": {
          "artifact": ".serverless/createSlot.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateSlotLambdaVersionZls2KMuYgWg90x5x9UM2Wy78kATFkeuxE9u0vnnerY"
      },
      "deleteSlot": {
        "handler": "src/slots.deleteSlot",
        "events": [
          {
            "http": {
              "path": "api/slots/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "next-step-paws-api-prod-deleteSlot",
        "package": {
          "artifact": ".serverless/deleteSlot.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteSlotLambdaVersion4FoNC19Rt3wkqcochQfEXBtXujfF59fpoTUxM0LMKo0"
      }
    },
    "resources": {
      "Resources": {
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "next-step-paws-api-users-prod",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              },
              {
                "AttributeName": "role",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "EmailIndex",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "RoleIndex",
                "KeySchema": [
                  {
                    "AttributeName": "role",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": false
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "prod"
              },
              {
                "Key": "Service",
                "Value": "next-step-paws-api"
              }
            ]
          }
        },
        "BookingsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "next-step-paws-api-bookings-prod",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "slotId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "UserIndex",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "SlotIndex",
                "KeySchema": [
                  {
                    "AttributeName": "slotId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "StatusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": "prod"
              },
              {
                "Key": "Service",
                "Value": "next-step-paws-api"
              }
            ]
          }
        },
        "ClassesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "next-step-paws-api-classes-prod",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "level",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "LevelIndex",
                "KeySchema": [
                  {
                    "AttributeName": "level",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": "prod"
              },
              {
                "Key": "Service",
                "Value": "next-step-paws-api"
              }
            ]
          }
        },
        "SlotsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "next-step-paws-api-slots-prod",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "date",
                "AttributeType": "S"
              },
              {
                "AttributeName": "isBooked",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "DateIndex",
                "KeySchema": [
                  {
                    "AttributeName": "date",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "BookingStatusIndex",
                "KeySchema": [
                  {
                    "AttributeName": "isBooked",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Environment",
                "Value": "prod"
              },
              {
                "Key": "Service",
                "Value": "next-step-paws-api"
              }
            ]
          }
        }
      },
      "Outputs": {
        "UsersTableName": {
          "Value": {
            "Ref": "UsersTable"
          },
          "Export": {
            "Name": "next-step-paws-api-prod-UsersTableName"
          }
        },
        "BookingsTableName": {
          "Value": {
            "Ref": "BookingsTable"
          },
          "Export": {
            "Name": "next-step-paws-api-prod-BookingsTableName"
          }
        },
        "ClassesTableName": {
          "Value": {
            "Ref": "ClassesTable"
          },
          "Export": {
            "Name": "next-step-paws-api-prod-ClassesTableName"
          }
        },
        "SlotsTableName": {
          "Value": {
            "Ref": "SlotsTable"
          },
          "Export": {
            "Name": "next-step-paws-api-prod-SlotsTableName"
          }
        },
        "ApiGatewayUrl": {
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                "us-east-1",
                ".amazonaws.com/",
                "prod"
              ]
            ]
          },
          "Export": {
            "Name": "next-step-paws-api-prod-ApiGatewayUrl"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "next-step-paws-api",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "package": {
        "individually": true,
        "artifactsS3KeyDirname": "serverless/next-step-paws-api/prod/code-artifacts",
        "artifactDirectoryName": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/next-step-paws-api/prod/1754876581518-2025-08-11T01:43:01.518Z",
    "artifact": ""
  }
}