name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run typecheck
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          junit.xml

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: build/

  api-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: dog_training_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
        
    - name: Install API dependencies
      run: |
        cd api
        npm ci
        
    - name: Run API type checking
      run: |
        cd api
        npx tsc --noEmit
        
    - name: Setup test database
      run: |
        cd api
        export DATABASE_URL=postgresql://test_user:test_password@localhost:5432/dog_training_test
        psql $DATABASE_URL -f ../database/init.sql
      env:
        PGPASSWORD: test_password
        
    - name: Run API tests
      run: |
        cd api
        npm test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dog_training_test
        JWT_SECRET: test_jwt_secret
        NODE_ENV: test

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build frontend Docker image
      run: |
        docker build -t nextsteppaws/frontend:latest ./
        
    - name: Build API Docker image
      run: |
        docker build -t nextsteppaws/api:latest ./api
        
    - name: Test Docker compose
      run: |
        docker-compose -f docker-compose.yml config
        
    - name: Save Docker images
      run: |
        docker save nextsteppaws/frontend:latest > frontend.tar
        docker save nextsteppaws/api:latest > api.tar
        
    - name: Archive Docker images
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          frontend.tar
          api.tar

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Run security scan for API
      run: |
        cd api
        npm ci
        npm audit --audit-level=high

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build/
        
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
      
    - name: Run Lighthouse CI
      run: |
        npm run build
        npx serve -s build -p 3000 &
        sleep 5
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, api-test, docker-build, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: echo "All tests passed! ✅"
      
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "Tests failed! ❌"
        exit 1
